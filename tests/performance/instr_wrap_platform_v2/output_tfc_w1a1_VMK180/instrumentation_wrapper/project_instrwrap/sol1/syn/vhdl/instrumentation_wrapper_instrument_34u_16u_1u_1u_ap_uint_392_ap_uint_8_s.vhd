-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity instrumentation_wrapper_instrument_34u_16u_1u_1u_ap_uint_392_ap_uint_8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cfg_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cfg_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cfg_empty_n : IN STD_LOGIC;
    cfg_read : OUT STD_LOGIC;
    status_i : IN STD_LOGIC_VECTOR (31 downto 0);
    status_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    status_o_ap_vld : OUT STD_LOGIC;
    latency : OUT STD_LOGIC_VECTOR (31 downto 0);
    latency_ap_vld : OUT STD_LOGIC;
    interval : OUT STD_LOGIC_VECTOR (31 downto 0);
    interval_ap_vld : OUT STD_LOGIC;
    checksum : OUT STD_LOGIC_VECTOR (31 downto 0);
    checksum_ap_vld : OUT STD_LOGIC;
    finnix0_din : OUT STD_LOGIC_VECTOR (391 downto 0);
    finnix0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    finnix0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    finnix0_full_n : IN STD_LOGIC;
    finnix0_write : OUT STD_LOGIC;
    finnox0_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    finnox0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    finnox0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    finnox0_empty_n : IN STD_LOGIC;
    finnox0_read : OUT STD_LOGIC );
end;


architecture behav of instrumentation_wrapper_instrument_34u_16u_1u_1u_ap_uint_392_ap_uint_8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_iter1_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter2_fsm_state3 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_iter2_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_8805 : STD_LOGIC_VECTOR (15 downto 0) := "1000100000000101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_B1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110001";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_C1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000001";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_E1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100001";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_F1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110001";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_101 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000001";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_111 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010001";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_121 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100001";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_131 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110001";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_141 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000001";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_151 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010001";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_161 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100001";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_171 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110001";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_181 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000001";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_188 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001000";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv16_8233 : STD_LOGIC_VECTOR (15 downto 0) := "1000001000110011";
    constant ap_const_lv16_466 : STD_LOGIC_VECTOR (15 downto 0) := "0000010001100110";
    constant ap_const_lv16_8699 : STD_LOGIC_VECTOR (15 downto 0) := "1000011010011001";
    constant ap_const_lv16_8CC : STD_LOGIC_VECTOR (15 downto 0) := "0000100011001100";
    constant ap_const_lv16_8AFF : STD_LOGIC_VECTOR (15 downto 0) := "1000101011111111";
    constant ap_const_lv16_D32 : STD_LOGIC_VECTOR (15 downto 0) := "0000110100110010";
    constant ap_const_lv16_8F65 : STD_LOGIC_VECTOR (15 downto 0) := "1000111101100101";
    constant ap_const_lv16_1198 : STD_LOGIC_VECTOR (15 downto 0) := "0001000110011000";
    constant ap_const_lv16_93CB : STD_LOGIC_VECTOR (15 downto 0) := "1001001111001011";
    constant ap_const_lv16_15FE : STD_LOGIC_VECTOR (15 downto 0) := "0001010111111110";
    constant ap_const_lv16_9831 : STD_LOGIC_VECTOR (15 downto 0) := "1001100000110001";
    constant ap_const_lv16_1A64 : STD_LOGIC_VECTOR (15 downto 0) := "0001101001100100";
    constant ap_const_lv16_9C97 : STD_LOGIC_VECTOR (15 downto 0) := "1001110010010111";
    constant ap_const_lv16_1ECA : STD_LOGIC_VECTOR (15 downto 0) := "0001111011001010";
    constant ap_const_lv16_A0FD : STD_LOGIC_VECTOR (15 downto 0) := "1010000011111101";
    constant ap_const_lv16_2330 : STD_LOGIC_VECTOR (15 downto 0) := "0010001100110000";
    constant ap_const_lv16_A563 : STD_LOGIC_VECTOR (15 downto 0) := "1010010101100011";
    constant ap_const_lv16_2796 : STD_LOGIC_VECTOR (15 downto 0) := "0010011110010110";
    constant ap_const_lv16_A9C9 : STD_LOGIC_VECTOR (15 downto 0) := "1010100111001001";
    constant ap_const_lv16_2BFC : STD_LOGIC_VECTOR (15 downto 0) := "0010101111111100";
    constant ap_const_lv16_AE2F : STD_LOGIC_VECTOR (15 downto 0) := "1010111000101111";
    constant ap_const_lv16_3062 : STD_LOGIC_VECTOR (15 downto 0) := "0011000001100010";
    constant ap_const_lv16_B295 : STD_LOGIC_VECTOR (15 downto 0) := "1011001010010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv16_34C8 : STD_LOGIC_VECTOR (15 downto 0) := "0011010011001000";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal ap_CS_iter2_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter2_fsm_state0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state2 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_CS_iter2_fsm_state3 : STD_LOGIC;
    signal cnt_clk_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal timestamp_ovf : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal icnt_V : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal lfsr_V : STD_LOGIC_VECTOR (399 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal timestamp_unf : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal last_latency_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ts1_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal last_interval_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pkts_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal last_checksum_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cfg_blk_n : STD_LOGIC;
    signal empty_fu_419_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_1955 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_1955_pp0_iter0_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_1955_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_nbwritereq_fu_332_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1959 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1959_pp0_iter0_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1959_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cnt_clk_V_load_reg_1963 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_reg_1976 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_reg_1976_pp0_iter0_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_reg_1976_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln162_fu_1772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln162_reg_1980 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_vld_reg_1985 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_vld_reg_1985_pp0_iter0_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal oval_V_reg_1989 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_timestamp_ovf_loc_0_i_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_timestamp_ovf_loc_0_i_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter2_timestamp_ovf_loc_0_i_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_Repl2_1_phi_fu_410_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Repl2_1_reg_407 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_p_Repl2_1_reg_407 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter2_p_Repl2_1_reg_407 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln840_1_fu_1818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln163_fu_1796_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_26_fu_1366_p26 : STD_LOGIC_VECTOR (399 downto 0);
    signal p_Result_s_fu_1651_p26 : STD_LOGIC_VECTOR (399 downto 0);
    signal p_vld5_fu_1833_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln186_fu_1847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln186_1_fu_1862_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln840_fu_1883_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_30_fu_1895_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_1426_p26 : STD_LOGIC_VECTOR (391 downto 0);
    signal p_1_fu_1711_p26 : STD_LOGIC_VECTOR (391 downto 0);
    signal timestamps_full_n : STD_LOGIC;
    signal timestamps_write : STD_LOGIC;
    signal finnox0_read_nbread_fu_353_p2_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal timestamps_read_nbread_fu_359_p2_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal timestamps_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal timestamps_empty_n : STD_LOGIC;
    signal timestamps_read : STD_LOGIC;
    signal p_Result_29_fu_1921_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal status_o_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal latency_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal interval_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal checksum_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lshr_ln_fu_450_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_1_fu_446_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln368_fu_460_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln368_fu_464_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_1_fu_478_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_2_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_1_fu_500_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_1_fu_488_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_2_fu_514_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_3_fu_528_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_2_fu_536_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_2_fu_524_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_3_fu_550_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_4_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_3_fu_572_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_3_fu_560_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_4_fu_586_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_5_fu_600_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_4_fu_608_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_4_fu_596_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_5_fu_622_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_6_fu_636_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_5_fu_644_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_5_fu_632_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_6_fu_658_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_7_fu_672_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_6_fu_680_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_6_fu_668_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_7_fu_694_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_8_fu_708_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_7_fu_716_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_7_fu_704_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_8_fu_730_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_9_fu_744_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_8_fu_752_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_8_fu_740_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_9_fu_766_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_10_fu_780_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_9_fu_788_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_9_fu_776_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_s_fu_802_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_11_fu_816_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_10_fu_824_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_10_fu_812_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_10_fu_838_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_12_fu_852_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_11_fu_860_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_11_fu_848_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_11_fu_874_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_13_fu_888_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_12_fu_896_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_12_fu_884_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_12_fu_910_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_14_fu_924_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_13_fu_932_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_13_fu_920_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_13_fu_946_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_15_fu_960_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_14_fu_968_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_14_fu_956_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_14_fu_982_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_16_fu_996_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_15_fu_1004_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_15_fu_992_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_15_fu_1018_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_17_fu_1032_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_16_fu_1040_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_16_fu_1028_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_16_fu_1054_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_18_fu_1068_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_17_fu_1076_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_17_fu_1064_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_17_fu_1090_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_19_fu_1104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_18_fu_1112_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_18_fu_1100_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_18_fu_1126_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_20_fu_1140_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_19_fu_1148_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_19_fu_1136_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_19_fu_1162_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_21_fu_1176_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_20_fu_1184_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_20_fu_1172_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_20_fu_1198_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_22_fu_1212_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_21_fu_1220_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_21_fu_1208_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_21_fu_1234_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_23_fu_1248_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_22_fu_1256_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_22_fu_1244_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_22_fu_1270_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_24_fu_1284_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_23_fu_1292_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_23_fu_1280_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln368_23_fu_1306_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_25_fu_1320_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln368_24_fu_1328_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln368_24_fu_1316_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln368_25_fu_1346_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln368_s_fu_1336_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln368_49_fu_1354_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_48_fu_1300_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_47_fu_1264_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_46_fu_1228_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_45_fu_1192_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_44_fu_1156_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_43_fu_1120_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_42_fu_1084_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_41_fu_1048_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_40_fu_1012_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_39_fu_976_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_38_fu_940_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_37_fu_904_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_36_fu_868_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_35_fu_832_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_34_fu_796_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_33_fu_760_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_32_fu_724_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_31_fu_688_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_30_fu_652_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_29_fu_616_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_28_fu_580_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_27_fu_544_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_26_fu_508_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_25_fu_472_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_50_fu_1360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_fu_1481_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_i_fu_1629_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln368_23_fu_1639_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_22_fu_1623_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_21_fu_1617_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_20_fu_1611_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_19_fu_1605_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_18_fu_1599_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_17_fu_1593_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_16_fu_1587_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_15_fu_1581_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_14_fu_1575_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_13_fu_1569_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_12_fu_1563_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_11_fu_1557_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_10_fu_1551_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_9_fu_1545_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_8_fu_1539_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_7_fu_1533_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_6_fu_1527_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_5_fu_1521_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_4_fu_1515_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_3_fu_1509_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_2_fu_1503_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_1_fu_1497_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_fu_1491_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln368_24_fu_1645_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln162_fu_1766_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln162_fu_1766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_fu_1784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln186_fu_1790_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln840_fu_1830_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_i_fu_1913_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_iter2_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_iter0_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_iter1_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_iter2_fsm_state3_blk : STD_LOGIC;
    signal ap_condition_64 : BOOLEAN;
    signal ap_condition_163 : BOOLEAN;
    signal ap_condition_134 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component instrumentation_wrapper_fifo_w32_d34_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    timestamps_fifo_U : component instrumentation_wrapper_fifo_w32_d34_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cnt_clk_V,
        if_full_n => timestamps_full_n,
        if_write => timestamps_write,
        if_dout => timestamps_dout,
        if_empty_n => timestamps_empty_n,
        if_read => timestamps_read);





    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter2_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
            else
                ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    checksum_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_preg(0) <= '0';
                checksum_preg(1) <= '0';
                checksum_preg(2) <= '0';
                checksum_preg(3) <= '0';
                checksum_preg(4) <= '0';
                checksum_preg(5) <= '0';
                checksum_preg(6) <= '0';
                checksum_preg(7) <= '0';
                checksum_preg(24) <= '0';
                checksum_preg(25) <= '0';
                checksum_preg(26) <= '0';
                checksum_preg(27) <= '0';
                checksum_preg(28) <= '0';
                checksum_preg(29) <= '0';
                checksum_preg(30) <= '0';
                checksum_preg(31) <= '0';
            else
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
                                        checksum_preg(7 downto 0) <= last_checksum_V(7 downto 0);                    checksum_preg(31 downto 24) <= last_checksum_V(31 downto 24);
                end if; 
            end if;
        end if;
    end process;


    cnt_clk_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                cnt_clk_V <= ap_const_lv32_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
                    cnt_clk_V <= add_ln840_1_fu_1818_p2;
                end if; 
            end if;
        end if;
    end process;


    icnt_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icnt_V <= ap_const_lv5_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (((first_fu_436_p2 = ap_const_lv1_0) and (tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_1)) or ((tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_1) and (empty_fu_419_p1 = ap_const_lv1_1))))) then 
                    icnt_V <= select_ln163_fu_1796_p3;
                end if; 
            end if;
        end if;
    end process;


    interval_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                interval_preg <= ap_const_lv32_0;
            else
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
                    interval_preg <= last_interval_V;
                end if; 
            end if;
        end if;
    end process;


    last_checksum_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                last_checksum_V(0) <= '0';
                last_checksum_V(1) <= '0';
                last_checksum_V(2) <= '0';
                last_checksum_V(3) <= '0';
                last_checksum_V(4) <= '0';
                last_checksum_V(5) <= '0';
                last_checksum_V(6) <= '0';
                last_checksum_V(7) <= '0';
                last_checksum_V(24) <= '0';
                last_checksum_V(25) <= '0';
                last_checksum_V(26) <= '0';
                last_checksum_V(27) <= '0';
                last_checksum_V(28) <= '0';
                last_checksum_V(29) <= '0';
                last_checksum_V(30) <= '0';
                last_checksum_V(31) <= '0';
            else
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (p_vld_reg_1985_pp0_iter0_reg = ap_const_lv1_1))) then 
                                        last_checksum_V(7 downto 0) <= p_Result_30_fu_1895_p3(7 downto 0);                    last_checksum_V(31 downto 24) <= p_Result_30_fu_1895_p3(31 downto 24);
                end if; 
            end if;
        end if;
    end process;


    last_interval_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                last_interval_V <= ap_const_lv32_0;
            else
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (p_vld5_fu_1833_p1 = ap_const_lv1_1) and (p_vld_reg_1985_pp0_iter0_reg = ap_const_lv1_1))) then 
                    last_interval_V <= sub_ln186_1_fu_1862_p2;
                end if; 
            end if;
        end if;
    end process;


    last_latency_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                last_latency_V <= ap_const_lv32_0;
            else
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (p_vld5_fu_1833_p1 = ap_const_lv1_1) and (p_vld_reg_1985_pp0_iter0_reg = ap_const_lv1_1))) then 
                    last_latency_V <= sub_ln186_fu_1847_p2;
                end if; 
            end if;
        end if;
    end process;


    latency_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                latency_preg <= ap_const_lv32_0;
            else
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
                    latency_preg <= last_latency_V;
                end if; 
            end if;
        end if;
    end process;


    pkts_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                pkts_V <= ap_const_lv8_0;
            else
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (p_vld_reg_1985_pp0_iter0_reg = ap_const_lv1_1))) then 
                    pkts_V <= add_ln840_fu_1883_p2;
                end if; 
            end if;
        end if;
    end process;


    status_o_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                status_o_preg <= ap_const_lv32_0;
            else
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
                    status_o_preg <= p_Result_29_fu_1921_p5;
                end if; 
            end if;
        end if;
    end process;


    timestamp_ovf_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                timestamp_ovf <= ap_const_lv1_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (first_fu_436_p2 = ap_const_lv1_1) and (tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_1) and (empty_fu_419_p1 = ap_const_lv1_1))) then 
                    timestamp_ovf <= or_ln162_fu_1772_p2;
                end if; 
            end if;
        end if;
    end process;


    timestamp_unf_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                timestamp_unf <= ap_const_lv1_0;
            else
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (p_vld5_fu_1833_p1 = ap_const_lv1_0) and (p_vld_reg_1985_pp0_iter0_reg = ap_const_lv1_1))) then 
                    timestamp_unf <= ap_const_lv1_1;
                end if; 
            end if;
        end if;
    end process;


    ts1_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ts1_V <= ap_const_lv32_0;
            else
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (p_vld5_fu_1833_p1 = ap_const_lv1_1) and (p_vld_reg_1985_pp0_iter0_reg = ap_const_lv1_1))) then 
                    ts1_V <= timestamps_dout;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_p_Repl2_1_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_0)) or (not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (first_fu_436_p2 = ap_const_lv1_1) and (tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_1) and (empty_fu_419_p1 = ap_const_lv1_0)))) then 
                ap_phi_reg_pp0_iter1_p_Repl2_1_reg_407 <= timestamp_ovf;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
                ap_phi_reg_pp0_iter1_p_Repl2_1_reg_407 <= ap_phi_reg_pp0_iter0_p_Repl2_1_reg_407;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_timestamp_ovf_loc_0_i_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_64)) then
                if (((first_fu_436_p2 = ap_const_lv1_0) and (tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_timestamp_ovf_loc_0_i_reg_398 <= timestamp_ovf;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_timestamp_ovf_loc_0_i_reg_398 <= ap_phi_reg_pp0_iter0_timestamp_ovf_loc_0_i_reg_398;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_timestamp_ovf_loc_0_i_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then
                if ((ap_const_boolean_1 = ap_condition_163)) then 
                    ap_phi_reg_pp0_iter2_timestamp_ovf_loc_0_i_reg_398 <= or_ln162_reg_1980;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_timestamp_ovf_loc_0_i_reg_398 <= ap_phi_reg_pp0_iter1_timestamp_ovf_loc_0_i_reg_398;
                end if;
            end if; 
        end if;
    end process;

    lfsr_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_134)) then
                if ((first_fu_436_p2 = ap_const_lv1_1)) then 
                    lfsr_V <= p_Result_s_fu_1651_p26;
                elsif ((first_fu_436_p2 = ap_const_lv1_0)) then 
                    lfsr_V <= p_Result_26_fu_1366_p26;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then
                ap_phi_reg_pp0_iter2_p_Repl2_1_reg_407 <= ap_phi_reg_pp0_iter1_p_Repl2_1_reg_407;
                empty_reg_1955_pp0_iter1_reg <= empty_reg_1955;
                first_reg_1976_pp0_iter1_reg <= first_reg_1976;
                tmp_i_reg_1959_pp0_iter1_reg <= tmp_i_reg_1959;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                cnt_clk_V_load_reg_1963 <= cnt_clk_V;
                empty_reg_1955 <= empty_fu_419_p1;
                oval_V_reg_1989 <= finnox0_dout;
                p_vld_reg_1985 <= finnox0_read_nbread_fu_353_p2_0;
                tmp_i_reg_1959 <= (0=>finnix0_full_n, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_1))) then
                first_reg_1976 <= first_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (first_fu_436_p2 = ap_const_lv1_1) and (tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_1) and (empty_fu_419_p1 = ap_const_lv1_1))) then
                or_ln162_reg_1980 <= or_ln162_fu_1772_p2;
            end if;
        end if;
    end process;
    last_checksum_V(23 downto 8) <= "0000000000000000";
    checksum_preg(23 downto 8) <= "0000000000000000";

    ap_NS_iter0_fsm_assign_proc : process (ap_start, ap_CS_iter0_fsm, cfg_empty_n, ap_done_reg)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            when others =>  
                ap_NS_iter0_fsm <= "X";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm, cfg_empty_n, ap_done_reg)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state2 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                elsif (((ap_done_reg = ap_const_logic_0) and ((ap_const_logic_0 = ap_CS_iter0_fsm_state1) or ((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and ((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0)))))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XX";
        end case;
    end process;

    ap_NS_iter2_fsm_assign_proc : process (ap_CS_iter2_fsm, ap_done_reg, ap_CS_iter1_fsm_state2)
    begin
        case ap_CS_iter2_fsm is
            when ap_ST_iter2_fsm_state3 => 
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state3;
                elsif (((ap_const_logic_0 = ap_CS_iter1_fsm_state2) and (ap_done_reg = ap_const_logic_0))) then
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state0;
                else
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state3;
                end if;
            when ap_ST_iter2_fsm_state0 => 
                if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state3;
                else
                    ap_NS_iter2_fsm <= ap_ST_iter2_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter2_fsm <= "XX";
        end case;
    end process;
    add_ln186_fu_1790_p2 <= std_logic_vector(unsigned(icnt_V) + unsigned(ap_const_lv5_1));
    add_ln840_1_fu_1818_p2 <= std_logic_vector(unsigned(cnt_clk_V) + unsigned(ap_const_lv32_1));
    add_ln840_fu_1883_p2 <= std_logic_vector(unsigned(pkts_V) + unsigned(ap_const_lv8_1));
    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state2 <= ap_CS_iter1_fsm(1);
    ap_CS_iter2_fsm_state0 <= ap_CS_iter2_fsm(0);
    ap_CS_iter2_fsm_state3 <= ap_CS_iter2_fsm(1);

    ap_ST_iter0_fsm_state1_blk_assign_proc : process(ap_start, cfg_empty_n, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_iter0_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_iter0_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_iter1_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_iter2_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, cfg_empty_n, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_134_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, cfg_empty_n, ap_done_reg, tmp_i_nbwritereq_fu_332_p3)
    begin
                ap_condition_134 <= (not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_1));
    end process;


    ap_condition_163_assign_proc : process(empty_reg_1955_pp0_iter0_reg, tmp_i_reg_1959_pp0_iter0_reg, first_reg_1976_pp0_iter0_reg)
    begin
                ap_condition_163 <= ((first_reg_1976_pp0_iter0_reg = ap_const_lv1_1) and (tmp_i_reg_1959_pp0_iter0_reg = ap_const_lv1_1) and (empty_reg_1955_pp0_iter0_reg = ap_const_lv1_1));
    end process;


    ap_condition_64_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, cfg_empty_n, ap_done_reg)
    begin
                ap_condition_64 <= (not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_iter2_fsm_state3)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0, ap_CS_iter2_fsm_state0)
    begin
        if (((ap_const_logic_1 = ap_CS_iter2_fsm_state0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Repl2_1_phi_fu_410_p6_assign_proc : process(empty_reg_1955_pp0_iter1_reg, tmp_i_reg_1959_pp0_iter1_reg, first_reg_1976_pp0_iter1_reg, ap_phi_reg_pp0_iter2_timestamp_ovf_loc_0_i_reg_398, ap_phi_reg_pp0_iter2_p_Repl2_1_reg_407)
    begin
        if ((((first_reg_1976_pp0_iter1_reg = ap_const_lv1_0) and (tmp_i_reg_1959_pp0_iter1_reg = ap_const_lv1_1)) or ((tmp_i_reg_1959_pp0_iter1_reg = ap_const_lv1_1) and (empty_reg_1955_pp0_iter1_reg = ap_const_lv1_1)))) then 
            ap_phi_mux_p_Repl2_1_phi_fu_410_p6 <= ap_phi_reg_pp0_iter2_timestamp_ovf_loc_0_i_reg_398;
        else 
            ap_phi_mux_p_Repl2_1_phi_fu_410_p6 <= ap_phi_reg_pp0_iter2_p_Repl2_1_reg_407;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_Repl2_1_reg_407 <= "X";
    ap_phi_reg_pp0_iter0_timestamp_ovf_loc_0_i_reg_398 <= "X";

    ap_ready_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, cfg_empty_n, ap_done_reg)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cfg_blk_n_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, cfg_empty_n, ap_done_reg)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            cfg_blk_n <= cfg_empty_n;
        else 
            cfg_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cfg_read_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, cfg_empty_n, ap_done_reg)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            cfg_read <= ap_const_logic_1;
        else 
            cfg_read <= ap_const_logic_0;
        end if; 
    end process;


    checksum_assign_proc : process(ap_done_reg, ap_CS_iter2_fsm_state3, last_checksum_V, checksum_preg)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
            checksum <= last_checksum_V;
        else 
            checksum <= checksum_preg;
        end if; 
    end process;


    checksum_ap_vld_assign_proc : process(ap_done_reg, ap_CS_iter2_fsm_state3)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
            checksum_ap_vld <= ap_const_logic_1;
        else 
            checksum_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_419_p1 <= cfg_dout(1 - 1 downto 0);
    empty_reg_1955_pp0_iter0_reg <= empty_reg_1955;

    finnix0_din_assign_proc : process(empty_fu_419_p1, first_fu_436_p2, p_s_fu_1426_p26, p_1_fu_1711_p26, ap_condition_134)
    begin
        if ((ap_const_boolean_1 = ap_condition_134)) then
            if (((first_fu_436_p2 = ap_const_lv1_1) and (empty_fu_419_p1 = ap_const_lv1_1))) then 
                finnix0_din <= p_1_fu_1711_p26;
            elsif ((first_fu_436_p2 = ap_const_lv1_0)) then 
                finnix0_din <= p_s_fu_1426_p26;
            else 
                finnix0_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            finnix0_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    finnix0_write_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, cfg_empty_n, ap_done_reg, finnix0_full_n, empty_fu_419_p1, tmp_i_nbwritereq_fu_332_p3, first_fu_436_p2)
    begin
        if (((finnix0_full_n = ap_const_logic_1) and ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (finnix0_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (first_fu_436_p2 = ap_const_lv1_0) and (tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_1)) or (not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (first_fu_436_p2 = ap_const_lv1_1) and (tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_1) and (empty_fu_419_p1 = ap_const_lv1_1))))) then 
            finnix0_write <= ap_const_logic_1;
        else 
            finnix0_write <= ap_const_logic_0;
        end if; 
    end process;


    finnox0_read_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, cfg_empty_n, ap_done_reg, finnox0_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (finnox0_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            finnox0_read <= ap_const_logic_1;
        else 
            finnox0_read <= ap_const_logic_0;
        end if; 
    end process;

    finnox0_read_nbread_fu_353_p2_0 <= (0=>(finnox0_empty_n), others=>'-');
    first_fu_436_p2 <= "1" when (icnt_V = ap_const_lv5_0) else "0";
    first_reg_1976_pp0_iter0_reg <= first_reg_1976;
    icmp_ln1019_fu_1784_p2 <= "1" when (icnt_V = ap_const_lv5_F) else "0";

    interval_assign_proc : process(ap_done_reg, ap_CS_iter2_fsm_state3, last_interval_V, interval_preg)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
            interval <= last_interval_V;
        else 
            interval <= interval_preg;
        end if; 
    end process;


    interval_ap_vld_assign_proc : process(ap_done_reg, ap_CS_iter2_fsm_state3)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
            interval_ap_vld <= ap_const_logic_1;
        else 
            interval_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    latency_assign_proc : process(ap_done_reg, ap_CS_iter2_fsm_state3, last_latency_V, latency_preg)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
            latency <= last_latency_V;
        else 
            latency <= latency_preg;
        end if; 
    end process;


    latency_ap_vld_assign_proc : process(ap_done_reg, ap_CS_iter2_fsm_state3)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
            latency_ap_vld <= ap_const_logic_1;
        else 
            latency_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln368_10_fu_838_p4 <= lfsr_V(191 downto 177);
    lshr_ln368_11_fu_874_p4 <= lfsr_V(207 downto 193);
    lshr_ln368_12_fu_910_p4 <= lfsr_V(223 downto 209);
    lshr_ln368_13_fu_946_p4 <= lfsr_V(239 downto 225);
    lshr_ln368_14_fu_982_p4 <= lfsr_V(255 downto 241);
    lshr_ln368_15_fu_1018_p4 <= lfsr_V(271 downto 257);
    lshr_ln368_16_fu_1054_p4 <= lfsr_V(287 downto 273);
    lshr_ln368_17_fu_1090_p4 <= lfsr_V(303 downto 289);
    lshr_ln368_18_fu_1126_p4 <= lfsr_V(319 downto 305);
    lshr_ln368_19_fu_1162_p4 <= lfsr_V(335 downto 321);
    lshr_ln368_1_fu_478_p4 <= lfsr_V(31 downto 17);
    lshr_ln368_20_fu_1198_p4 <= lfsr_V(351 downto 337);
    lshr_ln368_21_fu_1234_p4 <= lfsr_V(367 downto 353);
    lshr_ln368_22_fu_1270_p4 <= lfsr_V(383 downto 369);
    lshr_ln368_23_fu_1306_p4 <= lfsr_V(399 downto 385);
    lshr_ln368_2_fu_514_p4 <= lfsr_V(47 downto 33);
    lshr_ln368_3_fu_550_p4 <= lfsr_V(63 downto 49);
    lshr_ln368_4_fu_586_p4 <= lfsr_V(79 downto 65);
    lshr_ln368_5_fu_622_p4 <= lfsr_V(95 downto 81);
    lshr_ln368_6_fu_658_p4 <= lfsr_V(111 downto 97);
    lshr_ln368_7_fu_694_p4 <= lfsr_V(127 downto 113);
    lshr_ln368_8_fu_730_p4 <= lfsr_V(143 downto 129);
    lshr_ln368_9_fu_766_p4 <= lfsr_V(159 downto 145);
    lshr_ln368_s_fu_802_p4 <= lfsr_V(175 downto 161);
    lshr_ln_fu_450_p4 <= lfsr_V(15 downto 1);
    or_ln162_fu_1772_p2 <= (xor_ln162_fu_1766_p2 or timestamp_ovf);
    p_1_fu_1711_p26 <= ((((((((((((((((((((((((xor_ln368_24_fu_1645_p2 & xor_ln368_22_fu_1623_p2) & xor_ln368_21_fu_1617_p2) & xor_ln368_20_fu_1611_p2) & xor_ln368_19_fu_1605_p2) & xor_ln368_18_fu_1599_p2) & xor_ln368_17_fu_1593_p2) & xor_ln368_16_fu_1587_p2) & xor_ln368_15_fu_1581_p2) & xor_ln368_14_fu_1575_p2) & xor_ln368_13_fu_1569_p2) & xor_ln368_12_fu_1563_p2) & xor_ln368_11_fu_1557_p2) & xor_ln368_10_fu_1551_p2) & xor_ln368_9_fu_1545_p2) & xor_ln368_8_fu_1539_p2) & xor_ln368_7_fu_1533_p2) & xor_ln368_6_fu_1527_p2) & xor_ln368_5_fu_1521_p2) & xor_ln368_4_fu_1515_p2) & xor_ln368_3_fu_1509_p2) & xor_ln368_2_fu_1503_p2) & xor_ln368_1_fu_1497_p2) & xor_ln368_fu_1491_p2) & tmp_1_i_fu_1481_p4);
    p_Result_10_fu_780_p3 <= lfsr_V(144 downto 144);
    p_Result_11_fu_816_p3 <= lfsr_V(160 downto 160);
    p_Result_12_fu_852_p3 <= lfsr_V(176 downto 176);
    p_Result_13_fu_888_p3 <= lfsr_V(192 downto 192);
    p_Result_14_fu_924_p3 <= lfsr_V(208 downto 208);
    p_Result_15_fu_960_p3 <= lfsr_V(224 downto 224);
    p_Result_16_fu_996_p3 <= lfsr_V(240 downto 240);
    p_Result_17_fu_1032_p3 <= lfsr_V(256 downto 256);
    p_Result_18_fu_1068_p3 <= lfsr_V(272 downto 272);
    p_Result_19_fu_1104_p3 <= lfsr_V(288 downto 288);
    p_Result_1_fu_446_p1 <= lfsr_V(1 - 1 downto 0);
    p_Result_20_fu_1140_p3 <= lfsr_V(304 downto 304);
    p_Result_21_fu_1176_p3 <= lfsr_V(320 downto 320);
    p_Result_22_fu_1212_p3 <= lfsr_V(336 downto 336);
    p_Result_23_fu_1248_p3 <= lfsr_V(352 downto 352);
    p_Result_24_fu_1284_p3 <= lfsr_V(368 downto 368);
    p_Result_25_fu_1320_p3 <= lfsr_V(384 downto 384);
    p_Result_26_fu_1366_p26 <= ((((((((((((((((((((((((xor_ln368_49_fu_1354_p2 & xor_ln368_48_fu_1300_p2) & xor_ln368_47_fu_1264_p2) & xor_ln368_46_fu_1228_p2) & xor_ln368_45_fu_1192_p2) & xor_ln368_44_fu_1156_p2) & xor_ln368_43_fu_1120_p2) & xor_ln368_42_fu_1084_p2) & xor_ln368_41_fu_1048_p2) & xor_ln368_40_fu_1012_p2) & xor_ln368_39_fu_976_p2) & xor_ln368_38_fu_940_p2) & xor_ln368_37_fu_904_p2) & xor_ln368_36_fu_868_p2) & xor_ln368_35_fu_832_p2) & xor_ln368_34_fu_796_p2) & xor_ln368_33_fu_760_p2) & xor_ln368_32_fu_724_p2) & xor_ln368_31_fu_688_p2) & xor_ln368_30_fu_652_p2) & xor_ln368_29_fu_616_p2) & xor_ln368_28_fu_580_p2) & xor_ln368_27_fu_544_p2) & xor_ln368_26_fu_508_p2) & xor_ln368_25_fu_472_p2);
    p_Result_29_fu_1921_p5 <= (status_i(31 downto 2) & tmp_29_i_fu_1913_p3);
    p_Result_2_fu_492_p3 <= lfsr_V(16 downto 16);
    p_Result_30_fu_1895_p3 <= (pkts_V & zext_ln840_fu_1830_p1);
    p_Result_3_fu_528_p3 <= lfsr_V(32 downto 32);
    p_Result_4_fu_564_p3 <= lfsr_V(48 downto 48);
    p_Result_5_fu_600_p3 <= lfsr_V(64 downto 64);
    p_Result_6_fu_636_p3 <= lfsr_V(80 downto 80);
    p_Result_7_fu_672_p3 <= lfsr_V(96 downto 96);
    p_Result_8_fu_708_p3 <= lfsr_V(112 downto 112);
    p_Result_9_fu_744_p3 <= lfsr_V(128 downto 128);
    p_Result_s_fu_1651_p26 <= ((((((((((((((((((((((((xor_ln368_23_fu_1639_p2 & xor_ln368_22_fu_1623_p2) & xor_ln368_21_fu_1617_p2) & xor_ln368_20_fu_1611_p2) & xor_ln368_19_fu_1605_p2) & xor_ln368_18_fu_1599_p2) & xor_ln368_17_fu_1593_p2) & xor_ln368_16_fu_1587_p2) & xor_ln368_15_fu_1581_p2) & xor_ln368_14_fu_1575_p2) & xor_ln368_13_fu_1569_p2) & xor_ln368_12_fu_1563_p2) & xor_ln368_11_fu_1557_p2) & xor_ln368_10_fu_1551_p2) & xor_ln368_9_fu_1545_p2) & xor_ln368_8_fu_1539_p2) & xor_ln368_7_fu_1533_p2) & xor_ln368_6_fu_1527_p2) & xor_ln368_5_fu_1521_p2) & xor_ln368_4_fu_1515_p2) & xor_ln368_3_fu_1509_p2) & xor_ln368_2_fu_1503_p2) & xor_ln368_1_fu_1497_p2) & xor_ln368_fu_1491_p2) & tmp_1_i_fu_1481_p4);
    p_s_fu_1426_p26 <= ((((((((((((((((((((((((xor_ln368_50_fu_1360_p2 & xor_ln368_48_fu_1300_p2) & xor_ln368_47_fu_1264_p2) & xor_ln368_46_fu_1228_p2) & xor_ln368_45_fu_1192_p2) & xor_ln368_44_fu_1156_p2) & xor_ln368_43_fu_1120_p2) & xor_ln368_42_fu_1084_p2) & xor_ln368_41_fu_1048_p2) & xor_ln368_40_fu_1012_p2) & xor_ln368_39_fu_976_p2) & xor_ln368_38_fu_940_p2) & xor_ln368_37_fu_904_p2) & xor_ln368_36_fu_868_p2) & xor_ln368_35_fu_832_p2) & xor_ln368_34_fu_796_p2) & xor_ln368_33_fu_760_p2) & xor_ln368_32_fu_724_p2) & xor_ln368_31_fu_688_p2) & xor_ln368_30_fu_652_p2) & xor_ln368_29_fu_616_p2) & xor_ln368_28_fu_580_p2) & xor_ln368_27_fu_544_p2) & xor_ln368_26_fu_508_p2) & xor_ln368_25_fu_472_p2);
    p_vld5_fu_1833_p1 <= timestamps_read_nbread_fu_359_p2_0;
    p_vld_reg_1985_pp0_iter0_reg <= p_vld_reg_1985;
    select_ln163_fu_1796_p3 <= 
        ap_const_lv5_0 when (icmp_ln1019_fu_1784_p2(0) = '1') else 
        add_ln186_fu_1790_p2;
    select_ln368_10_fu_824_p3 <= 
        ap_const_lv16_0 when (p_Result_11_fu_816_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_11_fu_860_p3 <= 
        ap_const_lv16_0 when (p_Result_12_fu_852_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_12_fu_896_p3 <= 
        ap_const_lv16_0 when (p_Result_13_fu_888_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_13_fu_932_p3 <= 
        ap_const_lv16_0 when (p_Result_14_fu_924_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_14_fu_968_p3 <= 
        ap_const_lv16_0 when (p_Result_15_fu_960_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_15_fu_1004_p3 <= 
        ap_const_lv16_0 when (p_Result_16_fu_996_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_16_fu_1040_p3 <= 
        ap_const_lv16_0 when (p_Result_17_fu_1032_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_17_fu_1076_p3 <= 
        ap_const_lv16_0 when (p_Result_18_fu_1068_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_18_fu_1112_p3 <= 
        ap_const_lv16_0 when (p_Result_19_fu_1104_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_19_fu_1148_p3 <= 
        ap_const_lv16_0 when (p_Result_20_fu_1140_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_1_fu_500_p3 <= 
        ap_const_lv16_0 when (p_Result_2_fu_492_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_20_fu_1184_p3 <= 
        ap_const_lv16_0 when (p_Result_21_fu_1176_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_21_fu_1220_p3 <= 
        ap_const_lv16_0 when (p_Result_22_fu_1212_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_22_fu_1256_p3 <= 
        ap_const_lv16_0 when (p_Result_23_fu_1248_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_23_fu_1292_p3 <= 
        ap_const_lv16_0 when (p_Result_24_fu_1284_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_24_fu_1328_p3 <= 
        ap_const_lv16_0 when (p_Result_25_fu_1320_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_25_fu_1346_p3 <= 
        ap_const_lv8_0 when (p_Result_25_fu_1320_p3(0) = '1') else 
        ap_const_lv8_5;
    select_ln368_2_fu_536_p3 <= 
        ap_const_lv16_0 when (p_Result_3_fu_528_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_3_fu_572_p3 <= 
        ap_const_lv16_0 when (p_Result_4_fu_564_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_4_fu_608_p3 <= 
        ap_const_lv16_0 when (p_Result_5_fu_600_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_5_fu_644_p3 <= 
        ap_const_lv16_0 when (p_Result_6_fu_636_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_6_fu_680_p3 <= 
        ap_const_lv16_0 when (p_Result_7_fu_672_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_7_fu_716_p3 <= 
        ap_const_lv16_0 when (p_Result_8_fu_708_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_8_fu_752_p3 <= 
        ap_const_lv16_0 when (p_Result_9_fu_744_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_9_fu_788_p3 <= 
        ap_const_lv16_0 when (p_Result_10_fu_780_p3(0) = '1') else 
        ap_const_lv16_8805;
    select_ln368_fu_464_p3 <= 
        ap_const_lv16_0 when (p_Result_1_fu_446_p1(0) = '1') else 
        ap_const_lv16_8805;

    status_o_assign_proc : process(ap_done_reg, ap_CS_iter2_fsm_state3, p_Result_29_fu_1921_p5, status_o_preg)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
            status_o <= p_Result_29_fu_1921_p5;
        else 
            status_o <= status_o_preg;
        end if; 
    end process;


    status_o_ap_vld_assign_proc : process(ap_done_reg, ap_CS_iter2_fsm_state3)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter2_fsm_state3))) then 
            status_o_ap_vld <= ap_const_logic_1;
        else 
            status_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln186_1_fu_1862_p2 <= std_logic_vector(unsigned(cnt_clk_V_load_reg_1963) - unsigned(ts1_V));
    sub_ln186_fu_1847_p2 <= std_logic_vector(unsigned(cnt_clk_V_load_reg_1963) - unsigned(timestamps_dout));

    timestamps_read_assign_proc : process(ap_done_reg, ap_CS_iter1_fsm_state2, p_vld_reg_1985_pp0_iter0_reg, timestamps_empty_n)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (timestamps_empty_n = ap_const_logic_1) and (p_vld_reg_1985_pp0_iter0_reg = ap_const_lv1_1))) then 
            timestamps_read <= ap_const_logic_1;
        else 
            timestamps_read <= ap_const_logic_0;
        end if; 
    end process;

    timestamps_read_nbread_fu_359_p2_0 <= (0=>(timestamps_empty_n), others=>'-');

    timestamps_write_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, cfg_empty_n, ap_done_reg, empty_fu_419_p1, tmp_i_nbwritereq_fu_332_p3, first_fu_436_p2, timestamps_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (cfg_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (timestamps_full_n = ap_const_logic_1) and (first_fu_436_p2 = ap_const_lv1_1) and (tmp_i_nbwritereq_fu_332_p3 = ap_const_lv1_1) and (empty_fu_419_p1 = ap_const_lv1_1))) then 
            timestamps_write <= ap_const_logic_1;
        else 
            timestamps_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_i_fu_1481_p4 <= cfg_dout(31 downto 16);
    tmp_27_i_fu_1629_p4 <= cfg_dout(23 downto 16);
    tmp_29_i_fu_1913_p3 <= (timestamp_unf & ap_phi_mux_p_Repl2_1_phi_fu_410_p6);
    tmp_i_nbwritereq_fu_332_p3 <= (0=>finnix0_full_n, others=>'-');
    tmp_i_reg_1959_pp0_iter0_reg <= tmp_i_reg_1959;
    trunc_ln368_s_fu_1336_p4 <= lfsr_V(392 downto 385);
    xor_ln162_fu_1766_p0 <= (0=>timestamps_full_n, others=>'-');
    xor_ln162_fu_1766_p2 <= (xor_ln162_fu_1766_p0 xor ap_const_lv1_1);
    xor_ln368_10_fu_1551_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_9831);
    xor_ln368_11_fu_1557_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_1A64);
    xor_ln368_12_fu_1563_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_9C97);
    xor_ln368_13_fu_1569_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_1ECA);
    xor_ln368_14_fu_1575_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_A0FD);
    xor_ln368_15_fu_1581_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_2330);
    xor_ln368_16_fu_1587_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_A563);
    xor_ln368_17_fu_1593_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_2796);
    xor_ln368_18_fu_1599_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_A9C9);
    xor_ln368_19_fu_1605_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_2BFC);
    xor_ln368_1_fu_1497_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_466);
    xor_ln368_20_fu_1611_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_AE2F);
    xor_ln368_21_fu_1617_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_3062);
    xor_ln368_22_fu_1623_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_B295);
    xor_ln368_23_fu_1639_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_34C8);
    xor_ln368_24_fu_1645_p2 <= (tmp_27_i_fu_1629_p4 xor ap_const_lv8_C8);
    xor_ln368_25_fu_472_p2 <= (zext_ln368_fu_460_p1 xor select_ln368_fu_464_p3);
    xor_ln368_26_fu_508_p2 <= (zext_ln368_1_fu_488_p1 xor select_ln368_1_fu_500_p3);
    xor_ln368_27_fu_544_p2 <= (zext_ln368_2_fu_524_p1 xor select_ln368_2_fu_536_p3);
    xor_ln368_28_fu_580_p2 <= (zext_ln368_3_fu_560_p1 xor select_ln368_3_fu_572_p3);
    xor_ln368_29_fu_616_p2 <= (zext_ln368_4_fu_596_p1 xor select_ln368_4_fu_608_p3);
    xor_ln368_2_fu_1503_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_8699);
    xor_ln368_30_fu_652_p2 <= (zext_ln368_5_fu_632_p1 xor select_ln368_5_fu_644_p3);
    xor_ln368_31_fu_688_p2 <= (zext_ln368_6_fu_668_p1 xor select_ln368_6_fu_680_p3);
    xor_ln368_32_fu_724_p2 <= (zext_ln368_7_fu_704_p1 xor select_ln368_7_fu_716_p3);
    xor_ln368_33_fu_760_p2 <= (zext_ln368_8_fu_740_p1 xor select_ln368_8_fu_752_p3);
    xor_ln368_34_fu_796_p2 <= (zext_ln368_9_fu_776_p1 xor select_ln368_9_fu_788_p3);
    xor_ln368_35_fu_832_p2 <= (zext_ln368_10_fu_812_p1 xor select_ln368_10_fu_824_p3);
    xor_ln368_36_fu_868_p2 <= (zext_ln368_11_fu_848_p1 xor select_ln368_11_fu_860_p3);
    xor_ln368_37_fu_904_p2 <= (zext_ln368_12_fu_884_p1 xor select_ln368_12_fu_896_p3);
    xor_ln368_38_fu_940_p2 <= (zext_ln368_13_fu_920_p1 xor select_ln368_13_fu_932_p3);
    xor_ln368_39_fu_976_p2 <= (zext_ln368_14_fu_956_p1 xor select_ln368_14_fu_968_p3);
    xor_ln368_3_fu_1509_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_8CC);
    xor_ln368_40_fu_1012_p2 <= (zext_ln368_15_fu_992_p1 xor select_ln368_15_fu_1004_p3);
    xor_ln368_41_fu_1048_p2 <= (zext_ln368_16_fu_1028_p1 xor select_ln368_16_fu_1040_p3);
    xor_ln368_42_fu_1084_p2 <= (zext_ln368_17_fu_1064_p1 xor select_ln368_17_fu_1076_p3);
    xor_ln368_43_fu_1120_p2 <= (zext_ln368_18_fu_1100_p1 xor select_ln368_18_fu_1112_p3);
    xor_ln368_44_fu_1156_p2 <= (zext_ln368_19_fu_1136_p1 xor select_ln368_19_fu_1148_p3);
    xor_ln368_45_fu_1192_p2 <= (zext_ln368_20_fu_1172_p1 xor select_ln368_20_fu_1184_p3);
    xor_ln368_46_fu_1228_p2 <= (zext_ln368_21_fu_1208_p1 xor select_ln368_21_fu_1220_p3);
    xor_ln368_47_fu_1264_p2 <= (zext_ln368_22_fu_1244_p1 xor select_ln368_22_fu_1256_p3);
    xor_ln368_48_fu_1300_p2 <= (zext_ln368_23_fu_1280_p1 xor select_ln368_23_fu_1292_p3);
    xor_ln368_49_fu_1354_p2 <= (zext_ln368_24_fu_1316_p1 xor select_ln368_24_fu_1328_p3);
    xor_ln368_4_fu_1515_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_8AFF);
    xor_ln368_50_fu_1360_p2 <= (trunc_ln368_s_fu_1336_p4 xor select_ln368_25_fu_1346_p3);
    xor_ln368_5_fu_1521_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_D32);
    xor_ln368_6_fu_1527_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_8F65);
    xor_ln368_7_fu_1533_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_1198);
    xor_ln368_8_fu_1539_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_93CB);
    xor_ln368_9_fu_1545_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_15FE);
    xor_ln368_fu_1491_p2 <= (tmp_1_i_fu_1481_p4 xor ap_const_lv16_8233);
    zext_ln368_10_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_s_fu_802_p4),16));
    zext_ln368_11_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_10_fu_838_p4),16));
    zext_ln368_12_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_11_fu_874_p4),16));
    zext_ln368_13_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_12_fu_910_p4),16));
    zext_ln368_14_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_13_fu_946_p4),16));
    zext_ln368_15_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_14_fu_982_p4),16));
    zext_ln368_16_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_15_fu_1018_p4),16));
    zext_ln368_17_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_16_fu_1054_p4),16));
    zext_ln368_18_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_17_fu_1090_p4),16));
    zext_ln368_19_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_18_fu_1126_p4),16));
    zext_ln368_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_1_fu_478_p4),16));
    zext_ln368_20_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_19_fu_1162_p4),16));
    zext_ln368_21_fu_1208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_20_fu_1198_p4),16));
    zext_ln368_22_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_21_fu_1234_p4),16));
    zext_ln368_23_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_22_fu_1270_p4),16));
    zext_ln368_24_fu_1316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_23_fu_1306_p4),16));
    zext_ln368_2_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_2_fu_514_p4),16));
    zext_ln368_3_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_3_fu_550_p4),16));
    zext_ln368_4_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_4_fu_586_p4),16));
    zext_ln368_5_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_5_fu_622_p4),16));
    zext_ln368_6_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_6_fu_658_p4),16));
    zext_ln368_7_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_7_fu_694_p4),16));
    zext_ln368_8_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_8_fu_730_p4),16));
    zext_ln368_9_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln368_9_fu_766_p4),16));
    zext_ln368_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_450_p4),16));
    zext_ln840_fu_1830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(oval_V_reg_1989),24));
end behav;
