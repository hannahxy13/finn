// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="TLastMarker_0_TLastMarker_0,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvm1802-vsva2197-2MP-e-S,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=10,HLS_VERSION=2022_2}" *)

module TLastMarker_0 (
        ap_clk,
        ap_rst_n,
        in0_V_TDATA,
        in0_V_TVALID,
        in0_V_TREADY,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY,
        out_V_TKEEP,
        out_V_TSTRB,
        out_V_TLAST
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input  [7:0] in0_V_TDATA;
input   in0_V_TVALID;
output   in0_V_TREADY;
output  [7:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;
output  [0:0] out_V_TKEEP;
output  [0:0] out_V_TSTRB;
output  [0:0] out_V_TLAST;

 reg    ap_rst_n_inv;
reg    in0_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    regslice_both_out_V_V_data_V_U_apdone_blk;
reg    ap_block_state2;
wire    regslice_both_in0_V_U_apdone_blk;
wire   [7:0] in0_V_TDATA_int_regslice;
wire    in0_V_TVALID_int_regslice;
reg    in0_V_TREADY_int_regslice;
wire    regslice_both_in0_V_U_ack_in;
reg    out_V_TVALID_int_regslice;
wire    out_V_TREADY_int_regslice;
wire    regslice_both_out_V_V_data_V_U_vld_out;
wire    regslice_both_out_V_V_keep_V_U_apdone_blk;
wire    regslice_both_out_V_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_V_V_keep_V_U_vld_out;
wire    regslice_both_out_V_V_strb_V_U_apdone_blk;
wire    regslice_both_out_V_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_V_V_strb_V_U_vld_out;
wire    regslice_both_out_V_V_last_V_U_apdone_blk;
wire    regslice_both_out_V_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_V_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

TLastMarker_0_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_V_TDATA),
    .vld_in(in0_V_TVALID),
    .ack_in(regslice_both_in0_V_U_ack_in),
    .data_out(in0_V_TDATA_int_regslice),
    .vld_out(in0_V_TVALID_int_regslice),
    .ack_out(in0_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_U_apdone_blk)
);

TLastMarker_0_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_V_TDATA_int_regslice),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(out_V_TREADY_int_regslice),
    .data_out(out_V_TDATA),
    .vld_out(regslice_both_out_V_V_data_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_V_data_V_U_apdone_blk)
);

TLastMarker_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd1),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_V_keep_V_U_ack_in_dummy),
    .data_out(out_V_TKEEP),
    .vld_out(regslice_both_out_V_V_keep_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_V_keep_V_U_apdone_blk)
);

TLastMarker_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_V_strb_V_U_ack_in_dummy),
    .data_out(out_V_TSTRB),
    .vld_out(regslice_both_out_V_V_strb_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_V_strb_V_U_apdone_blk)
);

TLastMarker_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd1),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_V_last_V_U_ack_in_dummy),
    .data_out(out_V_TLAST),
    .vld_out(regslice_both_out_V_V_last_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if (((out_V_TREADY_int_regslice == 1'b0) | (in0_V_TVALID_int_regslice == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_V_TREADY_int_regslice == 1'b0) | (regslice_both_out_V_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        in0_V_TDATA_blk_n = in0_V_TVALID_int_regslice;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_V_TREADY_int_regslice == 1'b0) | (in0_V_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in0_V_TREADY_int_regslice = 1'b1;
    end else begin
        in0_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        out_V_TDATA_blk_n = out_V_TREADY_int_regslice;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_V_TREADY_int_regslice == 1'b0) | (in0_V_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((out_V_TREADY_int_regslice == 1'b0) | (in0_V_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out_V_TREADY_int_regslice == 1'b0) | (regslice_both_out_V_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((out_V_TREADY_int_regslice == 1'b0) | (in0_V_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((out_V_TREADY_int_regslice == 1'b0) | (regslice_both_out_V_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign in0_V_TREADY = regslice_both_in0_V_U_ack_in;

assign out_V_TVALID = regslice_both_out_V_V_data_V_U_vld_out;

endmodule //TLastMarker_0
