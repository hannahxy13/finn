// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module instrumentation_wrapper_instrument_34u_16u_1u_1u_ap_uint_392_ap_uint_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cfg_dout,
        cfg_num_data_valid,
        cfg_fifo_cap,
        cfg_empty_n,
        cfg_read,
        status_i,
        status_o,
        status_o_ap_vld,
        latency,
        latency_ap_vld,
        interval,
        interval_ap_vld,
        checksum,
        checksum_ap_vld,
        finnix0_din,
        finnix0_num_data_valid,
        finnix0_fifo_cap,
        finnix0_full_n,
        finnix0_write,
        finnox0_dout,
        finnox0_num_data_valid,
        finnox0_fifo_cap,
        finnox0_empty_n,
        finnox0_read
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] cfg_dout;
input  [2:0] cfg_num_data_valid;
input  [2:0] cfg_fifo_cap;
input   cfg_empty_n;
output   cfg_read;
input  [31:0] status_i;
output  [31:0] status_o;
output   status_o_ap_vld;
output  [31:0] latency;
output   latency_ap_vld;
output  [31:0] interval;
output   interval_ap_vld;
output  [31:0] checksum;
output   checksum_ap_vld;
output  [391:0] finnix0_din;
input  [1:0] finnix0_num_data_valid;
input  [1:0] finnix0_fifo_cap;
input   finnix0_full_n;
output   finnix0_write;
input  [7:0] finnox0_dout;
input  [1:0] finnox0_num_data_valid;
input  [1:0] finnox0_fifo_cap;
input   finnox0_empty_n;
output   finnox0_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cfg_read;
reg[31:0] status_o;
reg status_o_ap_vld;
reg[31:0] latency;
reg latency_ap_vld;
reg[31:0] interval;
reg interval_ap_vld;
reg[31:0] checksum;
reg checksum_ap_vld;
reg[391:0] finnix0_din;
reg finnix0_write;
reg finnox0_read;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
reg   [31:0] cnt_clk_V;
reg   [0:0] timestamp_ovf;
reg   [4:0] icnt_V;
reg   [399:0] lfsr_V;
reg   [0:0] timestamp_unf;
reg   [31:0] last_latency_V;
reg   [31:0] ts1_V;
reg   [31:0] last_interval_V;
reg   [7:0] pkts_V;
reg   [31:0] last_checksum_V;
reg    cfg_blk_n;
wire   [0:0] empty_fu_419_p1;
reg   [0:0] empty_reg_1955;
wire   [0:0] empty_reg_1955_pp0_iter0_reg;
reg   [0:0] empty_reg_1955_pp0_iter1_reg;
wire   [0:0] tmp_i_nbwritereq_fu_332_p3;
reg   [0:0] tmp_i_reg_1959;
wire   [0:0] tmp_i_reg_1959_pp0_iter0_reg;
reg   [0:0] tmp_i_reg_1959_pp0_iter1_reg;
reg   [31:0] cnt_clk_V_load_reg_1963;
wire   [0:0] first_fu_436_p2;
reg   [0:0] first_reg_1976;
wire   [0:0] first_reg_1976_pp0_iter0_reg;
reg   [0:0] first_reg_1976_pp0_iter1_reg;
wire   [0:0] or_ln162_fu_1772_p2;
reg   [0:0] or_ln162_reg_1980;
reg   [0:0] p_vld_reg_1985;
wire   [0:0] p_vld_reg_1985_pp0_iter0_reg;
reg   [7:0] oval_V_reg_1989;
wire   [0:0] ap_phi_reg_pp0_iter0_timestamp_ovf_loc_0_i_reg_398;
reg   [0:0] ap_phi_reg_pp0_iter1_timestamp_ovf_loc_0_i_reg_398;
reg   [0:0] ap_phi_reg_pp0_iter2_timestamp_ovf_loc_0_i_reg_398;
reg   [0:0] ap_phi_mux_p_Repl2_1_phi_fu_410_p6;
wire   [0:0] ap_phi_reg_pp0_iter0_p_Repl2_1_reg_407;
reg   [0:0] ap_phi_reg_pp0_iter1_p_Repl2_1_reg_407;
reg   [0:0] ap_phi_reg_pp0_iter2_p_Repl2_1_reg_407;
wire   [31:0] add_ln840_1_fu_1818_p2;
wire   [4:0] select_ln163_fu_1796_p3;
wire   [399:0] p_Result_26_fu_1366_p26;
wire   [399:0] p_Result_s_fu_1651_p26;
wire   [0:0] p_vld5_fu_1833_p1;
wire   [31:0] sub_ln186_fu_1847_p2;
wire   [31:0] sub_ln186_1_fu_1862_p2;
wire   [7:0] add_ln840_fu_1883_p2;
wire   [31:0] p_Result_30_fu_1895_p3;
wire   [391:0] p_s_fu_1426_p26;
wire   [391:0] p_1_fu_1711_p26;
wire    timestamps_full_n;
reg    timestamps_write;
wire   [0:0] finnox0_read_nbread_fu_353_p2_0;
wire   [0:0] timestamps_read_nbread_fu_359_p2_0;
wire   [31:0] timestamps_dout;
wire    timestamps_empty_n;
reg    timestamps_read;
wire   [31:0] p_Result_29_fu_1921_p5;
reg   [31:0] status_o_preg;
reg   [31:0] latency_preg;
reg   [31:0] interval_preg;
reg   [31:0] checksum_preg;
wire   [14:0] lshr_ln_fu_450_p4;
wire   [0:0] p_Result_1_fu_446_p1;
wire   [15:0] zext_ln368_fu_460_p1;
wire   [15:0] select_ln368_fu_464_p3;
wire   [14:0] lshr_ln368_1_fu_478_p4;
wire   [0:0] p_Result_2_fu_492_p3;
wire   [15:0] select_ln368_1_fu_500_p3;
wire   [15:0] zext_ln368_1_fu_488_p1;
wire   [14:0] lshr_ln368_2_fu_514_p4;
wire   [0:0] p_Result_3_fu_528_p3;
wire   [15:0] select_ln368_2_fu_536_p3;
wire   [15:0] zext_ln368_2_fu_524_p1;
wire   [14:0] lshr_ln368_3_fu_550_p4;
wire   [0:0] p_Result_4_fu_564_p3;
wire   [15:0] select_ln368_3_fu_572_p3;
wire   [15:0] zext_ln368_3_fu_560_p1;
wire   [14:0] lshr_ln368_4_fu_586_p4;
wire   [0:0] p_Result_5_fu_600_p3;
wire   [15:0] select_ln368_4_fu_608_p3;
wire   [15:0] zext_ln368_4_fu_596_p1;
wire   [14:0] lshr_ln368_5_fu_622_p4;
wire   [0:0] p_Result_6_fu_636_p3;
wire   [15:0] select_ln368_5_fu_644_p3;
wire   [15:0] zext_ln368_5_fu_632_p1;
wire   [14:0] lshr_ln368_6_fu_658_p4;
wire   [0:0] p_Result_7_fu_672_p3;
wire   [15:0] select_ln368_6_fu_680_p3;
wire   [15:0] zext_ln368_6_fu_668_p1;
wire   [14:0] lshr_ln368_7_fu_694_p4;
wire   [0:0] p_Result_8_fu_708_p3;
wire   [15:0] select_ln368_7_fu_716_p3;
wire   [15:0] zext_ln368_7_fu_704_p1;
wire   [14:0] lshr_ln368_8_fu_730_p4;
wire   [0:0] p_Result_9_fu_744_p3;
wire   [15:0] select_ln368_8_fu_752_p3;
wire   [15:0] zext_ln368_8_fu_740_p1;
wire   [14:0] lshr_ln368_9_fu_766_p4;
wire   [0:0] p_Result_10_fu_780_p3;
wire   [15:0] select_ln368_9_fu_788_p3;
wire   [15:0] zext_ln368_9_fu_776_p1;
wire   [14:0] lshr_ln368_s_fu_802_p4;
wire   [0:0] p_Result_11_fu_816_p3;
wire   [15:0] select_ln368_10_fu_824_p3;
wire   [15:0] zext_ln368_10_fu_812_p1;
wire   [14:0] lshr_ln368_10_fu_838_p4;
wire   [0:0] p_Result_12_fu_852_p3;
wire   [15:0] select_ln368_11_fu_860_p3;
wire   [15:0] zext_ln368_11_fu_848_p1;
wire   [14:0] lshr_ln368_11_fu_874_p4;
wire   [0:0] p_Result_13_fu_888_p3;
wire   [15:0] select_ln368_12_fu_896_p3;
wire   [15:0] zext_ln368_12_fu_884_p1;
wire   [14:0] lshr_ln368_12_fu_910_p4;
wire   [0:0] p_Result_14_fu_924_p3;
wire   [15:0] select_ln368_13_fu_932_p3;
wire   [15:0] zext_ln368_13_fu_920_p1;
wire   [14:0] lshr_ln368_13_fu_946_p4;
wire   [0:0] p_Result_15_fu_960_p3;
wire   [15:0] select_ln368_14_fu_968_p3;
wire   [15:0] zext_ln368_14_fu_956_p1;
wire   [14:0] lshr_ln368_14_fu_982_p4;
wire   [0:0] p_Result_16_fu_996_p3;
wire   [15:0] select_ln368_15_fu_1004_p3;
wire   [15:0] zext_ln368_15_fu_992_p1;
wire   [14:0] lshr_ln368_15_fu_1018_p4;
wire   [0:0] p_Result_17_fu_1032_p3;
wire   [15:0] select_ln368_16_fu_1040_p3;
wire   [15:0] zext_ln368_16_fu_1028_p1;
wire   [14:0] lshr_ln368_16_fu_1054_p4;
wire   [0:0] p_Result_18_fu_1068_p3;
wire   [15:0] select_ln368_17_fu_1076_p3;
wire   [15:0] zext_ln368_17_fu_1064_p1;
wire   [14:0] lshr_ln368_17_fu_1090_p4;
wire   [0:0] p_Result_19_fu_1104_p3;
wire   [15:0] select_ln368_18_fu_1112_p3;
wire   [15:0] zext_ln368_18_fu_1100_p1;
wire   [14:0] lshr_ln368_18_fu_1126_p4;
wire   [0:0] p_Result_20_fu_1140_p3;
wire   [15:0] select_ln368_19_fu_1148_p3;
wire   [15:0] zext_ln368_19_fu_1136_p1;
wire   [14:0] lshr_ln368_19_fu_1162_p4;
wire   [0:0] p_Result_21_fu_1176_p3;
wire   [15:0] select_ln368_20_fu_1184_p3;
wire   [15:0] zext_ln368_20_fu_1172_p1;
wire   [14:0] lshr_ln368_20_fu_1198_p4;
wire   [0:0] p_Result_22_fu_1212_p3;
wire   [15:0] select_ln368_21_fu_1220_p3;
wire   [15:0] zext_ln368_21_fu_1208_p1;
wire   [14:0] lshr_ln368_21_fu_1234_p4;
wire   [0:0] p_Result_23_fu_1248_p3;
wire   [15:0] select_ln368_22_fu_1256_p3;
wire   [15:0] zext_ln368_22_fu_1244_p1;
wire   [14:0] lshr_ln368_22_fu_1270_p4;
wire   [0:0] p_Result_24_fu_1284_p3;
wire   [15:0] select_ln368_23_fu_1292_p3;
wire   [15:0] zext_ln368_23_fu_1280_p1;
wire   [14:0] lshr_ln368_23_fu_1306_p4;
wire   [0:0] p_Result_25_fu_1320_p3;
wire   [15:0] select_ln368_24_fu_1328_p3;
wire   [15:0] zext_ln368_24_fu_1316_p1;
wire   [7:0] select_ln368_25_fu_1346_p3;
wire   [7:0] trunc_ln368_s_fu_1336_p4;
wire   [15:0] xor_ln368_49_fu_1354_p2;
wire   [15:0] xor_ln368_48_fu_1300_p2;
wire   [15:0] xor_ln368_47_fu_1264_p2;
wire   [15:0] xor_ln368_46_fu_1228_p2;
wire   [15:0] xor_ln368_45_fu_1192_p2;
wire   [15:0] xor_ln368_44_fu_1156_p2;
wire   [15:0] xor_ln368_43_fu_1120_p2;
wire   [15:0] xor_ln368_42_fu_1084_p2;
wire   [15:0] xor_ln368_41_fu_1048_p2;
wire   [15:0] xor_ln368_40_fu_1012_p2;
wire   [15:0] xor_ln368_39_fu_976_p2;
wire   [15:0] xor_ln368_38_fu_940_p2;
wire   [15:0] xor_ln368_37_fu_904_p2;
wire   [15:0] xor_ln368_36_fu_868_p2;
wire   [15:0] xor_ln368_35_fu_832_p2;
wire   [15:0] xor_ln368_34_fu_796_p2;
wire   [15:0] xor_ln368_33_fu_760_p2;
wire   [15:0] xor_ln368_32_fu_724_p2;
wire   [15:0] xor_ln368_31_fu_688_p2;
wire   [15:0] xor_ln368_30_fu_652_p2;
wire   [15:0] xor_ln368_29_fu_616_p2;
wire   [15:0] xor_ln368_28_fu_580_p2;
wire   [15:0] xor_ln368_27_fu_544_p2;
wire   [15:0] xor_ln368_26_fu_508_p2;
wire   [15:0] xor_ln368_25_fu_472_p2;
wire   [7:0] xor_ln368_50_fu_1360_p2;
wire   [15:0] tmp_1_i_fu_1481_p4;
wire   [7:0] tmp_27_i_fu_1629_p4;
wire   [15:0] xor_ln368_23_fu_1639_p2;
wire   [15:0] xor_ln368_22_fu_1623_p2;
wire   [15:0] xor_ln368_21_fu_1617_p2;
wire   [15:0] xor_ln368_20_fu_1611_p2;
wire   [15:0] xor_ln368_19_fu_1605_p2;
wire   [15:0] xor_ln368_18_fu_1599_p2;
wire   [15:0] xor_ln368_17_fu_1593_p2;
wire   [15:0] xor_ln368_16_fu_1587_p2;
wire   [15:0] xor_ln368_15_fu_1581_p2;
wire   [15:0] xor_ln368_14_fu_1575_p2;
wire   [15:0] xor_ln368_13_fu_1569_p2;
wire   [15:0] xor_ln368_12_fu_1563_p2;
wire   [15:0] xor_ln368_11_fu_1557_p2;
wire   [15:0] xor_ln368_10_fu_1551_p2;
wire   [15:0] xor_ln368_9_fu_1545_p2;
wire   [15:0] xor_ln368_8_fu_1539_p2;
wire   [15:0] xor_ln368_7_fu_1533_p2;
wire   [15:0] xor_ln368_6_fu_1527_p2;
wire   [15:0] xor_ln368_5_fu_1521_p2;
wire   [15:0] xor_ln368_4_fu_1515_p2;
wire   [15:0] xor_ln368_3_fu_1509_p2;
wire   [15:0] xor_ln368_2_fu_1503_p2;
wire   [15:0] xor_ln368_1_fu_1497_p2;
wire   [15:0] xor_ln368_fu_1491_p2;
wire   [7:0] xor_ln368_24_fu_1645_p2;
wire   [0:0] xor_ln162_fu_1766_p0;
wire   [0:0] xor_ln162_fu_1766_p2;
wire   [0:0] icmp_ln1019_fu_1784_p2;
wire   [4:0] add_ln186_fu_1790_p2;
wire   [23:0] zext_ln840_fu_1830_p1;
wire   [1:0] tmp_29_i_fu_1913_p3;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
reg    ap_condition_64;
reg    ap_condition_163;
reg    ap_condition_134;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
#0 cnt_clk_V = 32'd0;
#0 timestamp_ovf = 1'd0;
#0 icnt_V = 5'd0;
#0 lfsr_V = 400'd0;
#0 timestamp_unf = 1'd0;
#0 last_latency_V = 32'd0;
#0 ts1_V = 32'd0;
#0 last_interval_V = 32'd0;
#0 pkts_V = 8'd0;
#0 last_checksum_V = 32'd0;
#0 status_o_preg = 32'd0;
#0 latency_preg = 32'd0;
#0 interval_preg = 32'd0;
#0 checksum_preg = 32'd0;
end

instrumentation_wrapper_fifo_w32_d34_A timestamps_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cnt_clk_V),
    .if_full_n(timestamps_full_n),
    .if_write(timestamps_write),
    .if_dout(timestamps_dout),
    .if_empty_n(timestamps_empty_n),
    .if_read(timestamps_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                checksum_preg[0] <= 1'b0;
        checksum_preg[1] <= 1'b0;
        checksum_preg[2] <= 1'b0;
        checksum_preg[3] <= 1'b0;
        checksum_preg[4] <= 1'b0;
        checksum_preg[5] <= 1'b0;
        checksum_preg[6] <= 1'b0;
        checksum_preg[7] <= 1'b0;
        checksum_preg[24] <= 1'b0;
        checksum_preg[25] <= 1'b0;
        checksum_preg[26] <= 1'b0;
        checksum_preg[27] <= 1'b0;
        checksum_preg[28] <= 1'b0;
        checksum_preg[29] <= 1'b0;
        checksum_preg[30] <= 1'b0;
        checksum_preg[31] <= 1'b0;
    end else begin
        if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                        checksum_preg[7 : 0] <= last_checksum_V[7 : 0];
            checksum_preg[31 : 24] <= last_checksum_V[31 : 24];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        cnt_clk_V <= 32'd0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            cnt_clk_V <= add_ln840_1_fu_1818_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icnt_V <= 5'd0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1) & (((first_fu_436_p2 == 1'd0) & (tmp_i_nbwritereq_fu_332_p3 == 1'd1)) | ((tmp_i_nbwritereq_fu_332_p3 == 1'd1) & (empty_fu_419_p1 == 1'd1))))) begin
            icnt_V <= select_ln163_fu_1796_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        interval_preg <= 32'd0;
    end else begin
        if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
            interval_preg <= last_interval_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                last_checksum_V[0] <= 1'b0;
        last_checksum_V[1] <= 1'b0;
        last_checksum_V[2] <= 1'b0;
        last_checksum_V[3] <= 1'b0;
        last_checksum_V[4] <= 1'b0;
        last_checksum_V[5] <= 1'b0;
        last_checksum_V[6] <= 1'b0;
        last_checksum_V[7] <= 1'b0;
        last_checksum_V[24] <= 1'b0;
        last_checksum_V[25] <= 1'b0;
        last_checksum_V[26] <= 1'b0;
        last_checksum_V[27] <= 1'b0;
        last_checksum_V[28] <= 1'b0;
        last_checksum_V[29] <= 1'b0;
        last_checksum_V[30] <= 1'b0;
        last_checksum_V[31] <= 1'b0;
    end else begin
        if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2) & (p_vld_reg_1985_pp0_iter0_reg == 1'd1))) begin
                        last_checksum_V[7 : 0] <= p_Result_30_fu_1895_p3[7 : 0];
            last_checksum_V[31 : 24] <= p_Result_30_fu_1895_p3[31 : 24];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        last_interval_V <= 32'd0;
    end else begin
        if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2) & (p_vld5_fu_1833_p1 == 1'd1) & (p_vld_reg_1985_pp0_iter0_reg == 1'd1))) begin
            last_interval_V <= sub_ln186_1_fu_1862_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        last_latency_V <= 32'd0;
    end else begin
        if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2) & (p_vld5_fu_1833_p1 == 1'd1) & (p_vld_reg_1985_pp0_iter0_reg == 1'd1))) begin
            last_latency_V <= sub_ln186_fu_1847_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        latency_preg <= 32'd0;
    end else begin
        if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
            latency_preg <= last_latency_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        pkts_V <= 8'd0;
    end else begin
        if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2) & (p_vld_reg_1985_pp0_iter0_reg == 1'd1))) begin
            pkts_V <= add_ln840_fu_1883_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        status_o_preg <= 32'd0;
    end else begin
        if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
            status_o_preg <= p_Result_29_fu_1921_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        timestamp_ovf <= 1'd0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1) & (first_fu_436_p2 == 1'd1) & (tmp_i_nbwritereq_fu_332_p3 == 1'd1) & (empty_fu_419_p1 == 1'd1))) begin
            timestamp_ovf <= or_ln162_fu_1772_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        timestamp_unf <= 1'd0;
    end else begin
        if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2) & (p_vld5_fu_1833_p1 == 1'd0) & (p_vld_reg_1985_pp0_iter0_reg == 1'd1))) begin
            timestamp_unf <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ts1_V <= 32'd0;
    end else begin
        if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2) & (p_vld5_fu_1833_p1 == 1'd1) & (p_vld_reg_1985_pp0_iter0_reg == 1'd1))) begin
            ts1_V <= timestamps_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1) & (tmp_i_nbwritereq_fu_332_p3 == 1'd0)) | (~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1) & (first_fu_436_p2 == 1'd1) & (tmp_i_nbwritereq_fu_332_p3 == 1'd1) & (empty_fu_419_p1 == 1'd0)))) begin
        ap_phi_reg_pp0_iter1_p_Repl2_1_reg_407 <= timestamp_ovf;
    end else if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_phi_reg_pp0_iter1_p_Repl2_1_reg_407 <= ap_phi_reg_pp0_iter0_p_Repl2_1_reg_407;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_64)) begin
        if (((first_fu_436_p2 == 1'd0) & (tmp_i_nbwritereq_fu_332_p3 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_timestamp_ovf_loc_0_i_reg_398 <= timestamp_ovf;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_timestamp_ovf_loc_0_i_reg_398 <= ap_phi_reg_pp0_iter0_timestamp_ovf_loc_0_i_reg_398;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        if ((1'b1 == ap_condition_163)) begin
            ap_phi_reg_pp0_iter2_timestamp_ovf_loc_0_i_reg_398 <= or_ln162_reg_1980;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_timestamp_ovf_loc_0_i_reg_398 <= ap_phi_reg_pp0_iter1_timestamp_ovf_loc_0_i_reg_398;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_134)) begin
        if ((first_fu_436_p2 == 1'd1)) begin
            lfsr_V <= p_Result_s_fu_1651_p26;
        end else if ((first_fu_436_p2 == 1'd0)) begin
            lfsr_V <= p_Result_26_fu_1366_p26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_phi_reg_pp0_iter2_p_Repl2_1_reg_407 <= ap_phi_reg_pp0_iter1_p_Repl2_1_reg_407;
        empty_reg_1955_pp0_iter1_reg <= empty_reg_1955;
        first_reg_1976_pp0_iter1_reg <= first_reg_1976;
        tmp_i_reg_1959_pp0_iter1_reg <= tmp_i_reg_1959;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        cnt_clk_V_load_reg_1963 <= cnt_clk_V;
        empty_reg_1955 <= empty_fu_419_p1;
        oval_V_reg_1989 <= finnox0_dout;
        p_vld_reg_1985 <= finnox0_read_nbread_fu_353_p2_0;
        tmp_i_reg_1959 <= finnix0_full_n;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1) & (tmp_i_nbwritereq_fu_332_p3 == 1'd1))) begin
        first_reg_1976 <= first_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1) & (first_fu_436_p2 == 1'd1) & (tmp_i_nbwritereq_fu_332_p3 == 1'd1) & (empty_fu_419_p1 == 1'd1))) begin
        or_ln162_reg_1980 <= or_ln162_fu_1772_p2;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((((first_reg_1976_pp0_iter1_reg == 1'd0) & (tmp_i_reg_1959_pp0_iter1_reg == 1'd1)) | ((tmp_i_reg_1959_pp0_iter1_reg == 1'd1) & (empty_reg_1955_pp0_iter1_reg == 1'd1)))) begin
        ap_phi_mux_p_Repl2_1_phi_fu_410_p6 = ap_phi_reg_pp0_iter2_timestamp_ovf_loc_0_i_reg_398;
    end else begin
        ap_phi_mux_p_Repl2_1_phi_fu_410_p6 = ap_phi_reg_pp0_iter2_p_Repl2_1_reg_407;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1))) begin
        cfg_blk_n = cfg_empty_n;
    end else begin
        cfg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        cfg_read = 1'b1;
    end else begin
        cfg_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        checksum = last_checksum_V;
    end else begin
        checksum = checksum_preg;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        checksum_ap_vld = 1'b1;
    end else begin
        checksum_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_134)) begin
        if (((first_fu_436_p2 == 1'd1) & (empty_fu_419_p1 == 1'd1))) begin
            finnix0_din = p_1_fu_1711_p26;
        end else if ((first_fu_436_p2 == 1'd0)) begin
            finnix0_din = p_s_fu_1426_p26;
        end else begin
            finnix0_din = 'bx;
        end
    end else begin
        finnix0_din = 'bx;
    end
end

always @ (*) begin
    if (((finnix0_full_n == 1'b1) & ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (finnix0_full_n == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1) & (first_fu_436_p2 == 1'd0) & (tmp_i_nbwritereq_fu_332_p3 == 1'd1)) | (~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1) & (first_fu_436_p2 == 1'd1) & (tmp_i_nbwritereq_fu_332_p3 == 1'd1) & (empty_fu_419_p1 == 1'd1))))) begin
        finnix0_write = 1'b1;
    end else begin
        finnix0_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (finnox0_empty_n == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        finnox0_read = 1'b1;
    end else begin
        finnox0_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        interval = last_interval_V;
    end else begin
        interval = interval_preg;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        interval_ap_vld = 1'b1;
    end else begin
        interval_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        latency = last_latency_V;
    end else begin
        latency = latency_preg;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        latency_ap_vld = 1'b1;
    end else begin
        latency_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        status_o = p_Result_29_fu_1921_p5;
    end else begin
        status_o = status_o_preg;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        status_o_ap_vld = 1'b1;
    end else begin
        status_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2) & (timestamps_empty_n == 1'b1) & (p_vld_reg_1985_pp0_iter0_reg == 1'd1))) begin
        timestamps_read = 1'b1;
    end else begin
        timestamps_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1) & (timestamps_full_n == 1'b1) & (first_fu_436_p2 == 1'd1) & (tmp_i_nbwritereq_fu_332_p3 == 1'd1) & (empty_fu_419_p1 == 1'd1))) begin
        timestamps_write = 1'b1;
    end else begin
        timestamps_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if (((ap_done_reg == 1'b0) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & ((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if (((1'b0 == ap_CS_iter1_fsm_state2) & (ap_done_reg == 1'b0))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if (((ap_done_reg == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln186_fu_1790_p2 = (icnt_V + 5'd1);

assign add_ln840_1_fu_1818_p2 = (cnt_clk_V + 32'd1);

assign add_ln840_fu_1883_p2 = (pkts_V + 8'd1);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_134 = (~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1) & (tmp_i_nbwritereq_fu_332_p3 == 1'd1));
end

always @ (*) begin
    ap_condition_163 = ((first_reg_1976_pp0_iter0_reg == 1'd1) & (tmp_i_reg_1959_pp0_iter0_reg == 1'd1) & (empty_reg_1955_pp0_iter0_reg == 1'd1));
end

always @ (*) begin
    ap_condition_64 = (~((ap_done_reg == 1'b1) | (cfg_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_phi_reg_pp0_iter0_p_Repl2_1_reg_407 = 'bx;

assign ap_phi_reg_pp0_iter0_timestamp_ovf_loc_0_i_reg_398 = 'bx;

assign empty_fu_419_p1 = cfg_dout[0:0];

assign empty_reg_1955_pp0_iter0_reg = empty_reg_1955;

assign finnox0_read_nbread_fu_353_p2_0 = finnox0_empty_n;

assign first_fu_436_p2 = ((icnt_V == 5'd0) ? 1'b1 : 1'b0);

assign first_reg_1976_pp0_iter0_reg = first_reg_1976;

assign icmp_ln1019_fu_1784_p2 = ((icnt_V == 5'd15) ? 1'b1 : 1'b0);

assign lshr_ln368_10_fu_838_p4 = {{lfsr_V[191:177]}};

assign lshr_ln368_11_fu_874_p4 = {{lfsr_V[207:193]}};

assign lshr_ln368_12_fu_910_p4 = {{lfsr_V[223:209]}};

assign lshr_ln368_13_fu_946_p4 = {{lfsr_V[239:225]}};

assign lshr_ln368_14_fu_982_p4 = {{lfsr_V[255:241]}};

assign lshr_ln368_15_fu_1018_p4 = {{lfsr_V[271:257]}};

assign lshr_ln368_16_fu_1054_p4 = {{lfsr_V[287:273]}};

assign lshr_ln368_17_fu_1090_p4 = {{lfsr_V[303:289]}};

assign lshr_ln368_18_fu_1126_p4 = {{lfsr_V[319:305]}};

assign lshr_ln368_19_fu_1162_p4 = {{lfsr_V[335:321]}};

assign lshr_ln368_1_fu_478_p4 = {{lfsr_V[31:17]}};

assign lshr_ln368_20_fu_1198_p4 = {{lfsr_V[351:337]}};

assign lshr_ln368_21_fu_1234_p4 = {{lfsr_V[367:353]}};

assign lshr_ln368_22_fu_1270_p4 = {{lfsr_V[383:369]}};

assign lshr_ln368_23_fu_1306_p4 = {{lfsr_V[399:385]}};

assign lshr_ln368_2_fu_514_p4 = {{lfsr_V[47:33]}};

assign lshr_ln368_3_fu_550_p4 = {{lfsr_V[63:49]}};

assign lshr_ln368_4_fu_586_p4 = {{lfsr_V[79:65]}};

assign lshr_ln368_5_fu_622_p4 = {{lfsr_V[95:81]}};

assign lshr_ln368_6_fu_658_p4 = {{lfsr_V[111:97]}};

assign lshr_ln368_7_fu_694_p4 = {{lfsr_V[127:113]}};

assign lshr_ln368_8_fu_730_p4 = {{lfsr_V[143:129]}};

assign lshr_ln368_9_fu_766_p4 = {{lfsr_V[159:145]}};

assign lshr_ln368_s_fu_802_p4 = {{lfsr_V[175:161]}};

assign lshr_ln_fu_450_p4 = {{lfsr_V[15:1]}};

assign or_ln162_fu_1772_p2 = (xor_ln162_fu_1766_p2 | timestamp_ovf);

assign p_1_fu_1711_p26 = {{{{{{{{{{{{{{{{{{{{{{{{{xor_ln368_24_fu_1645_p2}, {xor_ln368_22_fu_1623_p2}}, {xor_ln368_21_fu_1617_p2}}, {xor_ln368_20_fu_1611_p2}}, {xor_ln368_19_fu_1605_p2}}, {xor_ln368_18_fu_1599_p2}}, {xor_ln368_17_fu_1593_p2}}, {xor_ln368_16_fu_1587_p2}}, {xor_ln368_15_fu_1581_p2}}, {xor_ln368_14_fu_1575_p2}}, {xor_ln368_13_fu_1569_p2}}, {xor_ln368_12_fu_1563_p2}}, {xor_ln368_11_fu_1557_p2}}, {xor_ln368_10_fu_1551_p2}}, {xor_ln368_9_fu_1545_p2}}, {xor_ln368_8_fu_1539_p2}}, {xor_ln368_7_fu_1533_p2}}, {xor_ln368_6_fu_1527_p2}}, {xor_ln368_5_fu_1521_p2}}, {xor_ln368_4_fu_1515_p2}}, {xor_ln368_3_fu_1509_p2}}, {xor_ln368_2_fu_1503_p2}}, {xor_ln368_1_fu_1497_p2}}, {xor_ln368_fu_1491_p2}}, {tmp_1_i_fu_1481_p4}};

assign p_Result_10_fu_780_p3 = lfsr_V[32'd144];

assign p_Result_11_fu_816_p3 = lfsr_V[32'd160];

assign p_Result_12_fu_852_p3 = lfsr_V[32'd176];

assign p_Result_13_fu_888_p3 = lfsr_V[32'd192];

assign p_Result_14_fu_924_p3 = lfsr_V[32'd208];

assign p_Result_15_fu_960_p3 = lfsr_V[32'd224];

assign p_Result_16_fu_996_p3 = lfsr_V[32'd240];

assign p_Result_17_fu_1032_p3 = lfsr_V[32'd256];

assign p_Result_18_fu_1068_p3 = lfsr_V[32'd272];

assign p_Result_19_fu_1104_p3 = lfsr_V[32'd288];

assign p_Result_1_fu_446_p1 = lfsr_V[0:0];

assign p_Result_20_fu_1140_p3 = lfsr_V[32'd304];

assign p_Result_21_fu_1176_p3 = lfsr_V[32'd320];

assign p_Result_22_fu_1212_p3 = lfsr_V[32'd336];

assign p_Result_23_fu_1248_p3 = lfsr_V[32'd352];

assign p_Result_24_fu_1284_p3 = lfsr_V[32'd368];

assign p_Result_25_fu_1320_p3 = lfsr_V[32'd384];

assign p_Result_26_fu_1366_p26 = {{{{{{{{{{{{{{{{{{{{{{{{{xor_ln368_49_fu_1354_p2}, {xor_ln368_48_fu_1300_p2}}, {xor_ln368_47_fu_1264_p2}}, {xor_ln368_46_fu_1228_p2}}, {xor_ln368_45_fu_1192_p2}}, {xor_ln368_44_fu_1156_p2}}, {xor_ln368_43_fu_1120_p2}}, {xor_ln368_42_fu_1084_p2}}, {xor_ln368_41_fu_1048_p2}}, {xor_ln368_40_fu_1012_p2}}, {xor_ln368_39_fu_976_p2}}, {xor_ln368_38_fu_940_p2}}, {xor_ln368_37_fu_904_p2}}, {xor_ln368_36_fu_868_p2}}, {xor_ln368_35_fu_832_p2}}, {xor_ln368_34_fu_796_p2}}, {xor_ln368_33_fu_760_p2}}, {xor_ln368_32_fu_724_p2}}, {xor_ln368_31_fu_688_p2}}, {xor_ln368_30_fu_652_p2}}, {xor_ln368_29_fu_616_p2}}, {xor_ln368_28_fu_580_p2}}, {xor_ln368_27_fu_544_p2}}, {xor_ln368_26_fu_508_p2}}, {xor_ln368_25_fu_472_p2}};

assign p_Result_29_fu_1921_p5 = {{status_i[31:2]}, {tmp_29_i_fu_1913_p3}};

assign p_Result_2_fu_492_p3 = lfsr_V[32'd16];

assign p_Result_30_fu_1895_p3 = {{pkts_V}, {zext_ln840_fu_1830_p1}};

assign p_Result_3_fu_528_p3 = lfsr_V[32'd32];

assign p_Result_4_fu_564_p3 = lfsr_V[32'd48];

assign p_Result_5_fu_600_p3 = lfsr_V[32'd64];

assign p_Result_6_fu_636_p3 = lfsr_V[32'd80];

assign p_Result_7_fu_672_p3 = lfsr_V[32'd96];

assign p_Result_8_fu_708_p3 = lfsr_V[32'd112];

assign p_Result_9_fu_744_p3 = lfsr_V[32'd128];

assign p_Result_s_fu_1651_p26 = {{{{{{{{{{{{{{{{{{{{{{{{{xor_ln368_23_fu_1639_p2}, {xor_ln368_22_fu_1623_p2}}, {xor_ln368_21_fu_1617_p2}}, {xor_ln368_20_fu_1611_p2}}, {xor_ln368_19_fu_1605_p2}}, {xor_ln368_18_fu_1599_p2}}, {xor_ln368_17_fu_1593_p2}}, {xor_ln368_16_fu_1587_p2}}, {xor_ln368_15_fu_1581_p2}}, {xor_ln368_14_fu_1575_p2}}, {xor_ln368_13_fu_1569_p2}}, {xor_ln368_12_fu_1563_p2}}, {xor_ln368_11_fu_1557_p2}}, {xor_ln368_10_fu_1551_p2}}, {xor_ln368_9_fu_1545_p2}}, {xor_ln368_8_fu_1539_p2}}, {xor_ln368_7_fu_1533_p2}}, {xor_ln368_6_fu_1527_p2}}, {xor_ln368_5_fu_1521_p2}}, {xor_ln368_4_fu_1515_p2}}, {xor_ln368_3_fu_1509_p2}}, {xor_ln368_2_fu_1503_p2}}, {xor_ln368_1_fu_1497_p2}}, {xor_ln368_fu_1491_p2}}, {tmp_1_i_fu_1481_p4}};

assign p_s_fu_1426_p26 = {{{{{{{{{{{{{{{{{{{{{{{{{xor_ln368_50_fu_1360_p2}, {xor_ln368_48_fu_1300_p2}}, {xor_ln368_47_fu_1264_p2}}, {xor_ln368_46_fu_1228_p2}}, {xor_ln368_45_fu_1192_p2}}, {xor_ln368_44_fu_1156_p2}}, {xor_ln368_43_fu_1120_p2}}, {xor_ln368_42_fu_1084_p2}}, {xor_ln368_41_fu_1048_p2}}, {xor_ln368_40_fu_1012_p2}}, {xor_ln368_39_fu_976_p2}}, {xor_ln368_38_fu_940_p2}}, {xor_ln368_37_fu_904_p2}}, {xor_ln368_36_fu_868_p2}}, {xor_ln368_35_fu_832_p2}}, {xor_ln368_34_fu_796_p2}}, {xor_ln368_33_fu_760_p2}}, {xor_ln368_32_fu_724_p2}}, {xor_ln368_31_fu_688_p2}}, {xor_ln368_30_fu_652_p2}}, {xor_ln368_29_fu_616_p2}}, {xor_ln368_28_fu_580_p2}}, {xor_ln368_27_fu_544_p2}}, {xor_ln368_26_fu_508_p2}}, {xor_ln368_25_fu_472_p2}};

assign p_vld5_fu_1833_p1 = timestamps_read_nbread_fu_359_p2_0;

assign p_vld_reg_1985_pp0_iter0_reg = p_vld_reg_1985;

assign select_ln163_fu_1796_p3 = ((icmp_ln1019_fu_1784_p2[0:0] == 1'b1) ? 5'd0 : add_ln186_fu_1790_p2);

assign select_ln368_10_fu_824_p3 = ((p_Result_11_fu_816_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_11_fu_860_p3 = ((p_Result_12_fu_852_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_12_fu_896_p3 = ((p_Result_13_fu_888_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_13_fu_932_p3 = ((p_Result_14_fu_924_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_14_fu_968_p3 = ((p_Result_15_fu_960_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_15_fu_1004_p3 = ((p_Result_16_fu_996_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_16_fu_1040_p3 = ((p_Result_17_fu_1032_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_17_fu_1076_p3 = ((p_Result_18_fu_1068_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_18_fu_1112_p3 = ((p_Result_19_fu_1104_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_19_fu_1148_p3 = ((p_Result_20_fu_1140_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_1_fu_500_p3 = ((p_Result_2_fu_492_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_20_fu_1184_p3 = ((p_Result_21_fu_1176_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_21_fu_1220_p3 = ((p_Result_22_fu_1212_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_22_fu_1256_p3 = ((p_Result_23_fu_1248_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_23_fu_1292_p3 = ((p_Result_24_fu_1284_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_24_fu_1328_p3 = ((p_Result_25_fu_1320_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_25_fu_1346_p3 = ((p_Result_25_fu_1320_p3[0:0] == 1'b1) ? 8'd0 : 8'd5);

assign select_ln368_2_fu_536_p3 = ((p_Result_3_fu_528_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_3_fu_572_p3 = ((p_Result_4_fu_564_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_4_fu_608_p3 = ((p_Result_5_fu_600_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_5_fu_644_p3 = ((p_Result_6_fu_636_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_6_fu_680_p3 = ((p_Result_7_fu_672_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_7_fu_716_p3 = ((p_Result_8_fu_708_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_8_fu_752_p3 = ((p_Result_9_fu_744_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_9_fu_788_p3 = ((p_Result_10_fu_780_p3[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign select_ln368_fu_464_p3 = ((p_Result_1_fu_446_p1[0:0] == 1'b1) ? 16'd0 : 16'd34821);

assign sub_ln186_1_fu_1862_p2 = (cnt_clk_V_load_reg_1963 - ts1_V);

assign sub_ln186_fu_1847_p2 = (cnt_clk_V_load_reg_1963 - timestamps_dout);

assign timestamps_read_nbread_fu_359_p2_0 = timestamps_empty_n;

assign tmp_1_i_fu_1481_p4 = {{cfg_dout[31:16]}};

assign tmp_27_i_fu_1629_p4 = {{cfg_dout[23:16]}};

assign tmp_29_i_fu_1913_p3 = {{timestamp_unf}, {ap_phi_mux_p_Repl2_1_phi_fu_410_p6}};

assign tmp_i_nbwritereq_fu_332_p3 = finnix0_full_n;

assign tmp_i_reg_1959_pp0_iter0_reg = tmp_i_reg_1959;

assign trunc_ln368_s_fu_1336_p4 = {{lfsr_V[392:385]}};

assign xor_ln162_fu_1766_p0 = timestamps_full_n;

assign xor_ln162_fu_1766_p2 = (xor_ln162_fu_1766_p0 ^ 1'd1);

assign xor_ln368_10_fu_1551_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd38961);

assign xor_ln368_11_fu_1557_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd6756);

assign xor_ln368_12_fu_1563_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd40087);

assign xor_ln368_13_fu_1569_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd7882);

assign xor_ln368_14_fu_1575_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd41213);

assign xor_ln368_15_fu_1581_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd9008);

assign xor_ln368_16_fu_1587_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd42339);

assign xor_ln368_17_fu_1593_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd10134);

assign xor_ln368_18_fu_1599_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd43465);

assign xor_ln368_19_fu_1605_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd11260);

assign xor_ln368_1_fu_1497_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd1126);

assign xor_ln368_20_fu_1611_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd44591);

assign xor_ln368_21_fu_1617_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd12386);

assign xor_ln368_22_fu_1623_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd45717);

assign xor_ln368_23_fu_1639_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd13512);

assign xor_ln368_24_fu_1645_p2 = (tmp_27_i_fu_1629_p4 ^ 8'd200);

assign xor_ln368_25_fu_472_p2 = (zext_ln368_fu_460_p1 ^ select_ln368_fu_464_p3);

assign xor_ln368_26_fu_508_p2 = (zext_ln368_1_fu_488_p1 ^ select_ln368_1_fu_500_p3);

assign xor_ln368_27_fu_544_p2 = (zext_ln368_2_fu_524_p1 ^ select_ln368_2_fu_536_p3);

assign xor_ln368_28_fu_580_p2 = (zext_ln368_3_fu_560_p1 ^ select_ln368_3_fu_572_p3);

assign xor_ln368_29_fu_616_p2 = (zext_ln368_4_fu_596_p1 ^ select_ln368_4_fu_608_p3);

assign xor_ln368_2_fu_1503_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd34457);

assign xor_ln368_30_fu_652_p2 = (zext_ln368_5_fu_632_p1 ^ select_ln368_5_fu_644_p3);

assign xor_ln368_31_fu_688_p2 = (zext_ln368_6_fu_668_p1 ^ select_ln368_6_fu_680_p3);

assign xor_ln368_32_fu_724_p2 = (zext_ln368_7_fu_704_p1 ^ select_ln368_7_fu_716_p3);

assign xor_ln368_33_fu_760_p2 = (zext_ln368_8_fu_740_p1 ^ select_ln368_8_fu_752_p3);

assign xor_ln368_34_fu_796_p2 = (zext_ln368_9_fu_776_p1 ^ select_ln368_9_fu_788_p3);

assign xor_ln368_35_fu_832_p2 = (zext_ln368_10_fu_812_p1 ^ select_ln368_10_fu_824_p3);

assign xor_ln368_36_fu_868_p2 = (zext_ln368_11_fu_848_p1 ^ select_ln368_11_fu_860_p3);

assign xor_ln368_37_fu_904_p2 = (zext_ln368_12_fu_884_p1 ^ select_ln368_12_fu_896_p3);

assign xor_ln368_38_fu_940_p2 = (zext_ln368_13_fu_920_p1 ^ select_ln368_13_fu_932_p3);

assign xor_ln368_39_fu_976_p2 = (zext_ln368_14_fu_956_p1 ^ select_ln368_14_fu_968_p3);

assign xor_ln368_3_fu_1509_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd2252);

assign xor_ln368_40_fu_1012_p2 = (zext_ln368_15_fu_992_p1 ^ select_ln368_15_fu_1004_p3);

assign xor_ln368_41_fu_1048_p2 = (zext_ln368_16_fu_1028_p1 ^ select_ln368_16_fu_1040_p3);

assign xor_ln368_42_fu_1084_p2 = (zext_ln368_17_fu_1064_p1 ^ select_ln368_17_fu_1076_p3);

assign xor_ln368_43_fu_1120_p2 = (zext_ln368_18_fu_1100_p1 ^ select_ln368_18_fu_1112_p3);

assign xor_ln368_44_fu_1156_p2 = (zext_ln368_19_fu_1136_p1 ^ select_ln368_19_fu_1148_p3);

assign xor_ln368_45_fu_1192_p2 = (zext_ln368_20_fu_1172_p1 ^ select_ln368_20_fu_1184_p3);

assign xor_ln368_46_fu_1228_p2 = (zext_ln368_21_fu_1208_p1 ^ select_ln368_21_fu_1220_p3);

assign xor_ln368_47_fu_1264_p2 = (zext_ln368_22_fu_1244_p1 ^ select_ln368_22_fu_1256_p3);

assign xor_ln368_48_fu_1300_p2 = (zext_ln368_23_fu_1280_p1 ^ select_ln368_23_fu_1292_p3);

assign xor_ln368_49_fu_1354_p2 = (zext_ln368_24_fu_1316_p1 ^ select_ln368_24_fu_1328_p3);

assign xor_ln368_4_fu_1515_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd35583);

assign xor_ln368_50_fu_1360_p2 = (trunc_ln368_s_fu_1336_p4 ^ select_ln368_25_fu_1346_p3);

assign xor_ln368_5_fu_1521_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd3378);

assign xor_ln368_6_fu_1527_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd36709);

assign xor_ln368_7_fu_1533_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd4504);

assign xor_ln368_8_fu_1539_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd37835);

assign xor_ln368_9_fu_1545_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd5630);

assign xor_ln368_fu_1491_p2 = (tmp_1_i_fu_1481_p4 ^ 16'd33331);

assign zext_ln368_10_fu_812_p1 = lshr_ln368_s_fu_802_p4;

assign zext_ln368_11_fu_848_p1 = lshr_ln368_10_fu_838_p4;

assign zext_ln368_12_fu_884_p1 = lshr_ln368_11_fu_874_p4;

assign zext_ln368_13_fu_920_p1 = lshr_ln368_12_fu_910_p4;

assign zext_ln368_14_fu_956_p1 = lshr_ln368_13_fu_946_p4;

assign zext_ln368_15_fu_992_p1 = lshr_ln368_14_fu_982_p4;

assign zext_ln368_16_fu_1028_p1 = lshr_ln368_15_fu_1018_p4;

assign zext_ln368_17_fu_1064_p1 = lshr_ln368_16_fu_1054_p4;

assign zext_ln368_18_fu_1100_p1 = lshr_ln368_17_fu_1090_p4;

assign zext_ln368_19_fu_1136_p1 = lshr_ln368_18_fu_1126_p4;

assign zext_ln368_1_fu_488_p1 = lshr_ln368_1_fu_478_p4;

assign zext_ln368_20_fu_1172_p1 = lshr_ln368_19_fu_1162_p4;

assign zext_ln368_21_fu_1208_p1 = lshr_ln368_20_fu_1198_p4;

assign zext_ln368_22_fu_1244_p1 = lshr_ln368_21_fu_1234_p4;

assign zext_ln368_23_fu_1280_p1 = lshr_ln368_22_fu_1270_p4;

assign zext_ln368_24_fu_1316_p1 = lshr_ln368_23_fu_1306_p4;

assign zext_ln368_2_fu_524_p1 = lshr_ln368_2_fu_514_p4;

assign zext_ln368_3_fu_560_p1 = lshr_ln368_3_fu_550_p4;

assign zext_ln368_4_fu_596_p1 = lshr_ln368_4_fu_586_p4;

assign zext_ln368_5_fu_632_p1 = lshr_ln368_5_fu_622_p4;

assign zext_ln368_6_fu_668_p1 = lshr_ln368_6_fu_658_p4;

assign zext_ln368_7_fu_704_p1 = lshr_ln368_7_fu_694_p4;

assign zext_ln368_8_fu_740_p1 = lshr_ln368_8_fu_730_p4;

assign zext_ln368_9_fu_776_p1 = lshr_ln368_9_fu_766_p4;

assign zext_ln368_fu_460_p1 = lshr_ln_fu_450_p4;

assign zext_ln840_fu_1830_p1 = oval_V_reg_1989;

always @ (posedge ap_clk) begin
    last_checksum_V[23:8] <= 16'b0000000000000000;
    checksum_preg[23:8] <= 16'b0000000000000000;
end

endmodule //instrumentation_wrapper_instrument_34u_16u_1u_1u_ap_uint_392_ap_uint_8_s
